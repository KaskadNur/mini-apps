const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 10000;

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
const BOT_TOKEN = process.env.BOT_TOKEN || '7591449691:AAGEsdfrNCgijjCgDwLPRaZ04rlU_UDxJys';
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–∞—Ä–∫–µ—Ç–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
const users = new Map();
const marketItems = new Map();
let itemIdCounter = 1000;

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Web App
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId', (req, res) => {
    const userId = req.params.userId;
    const userData = users.get(userId) || createNewUser(userId);
    res.json(userData);
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
app.post('/api/user/:userId/update-balance', (req, res) => {
    const userId = req.params.userId;
    const { balance, earned } = req.body;
    
    let userData = users.get(userId);
    if (!userData) {
        userData = createNewUser(userId);
    }
    
    if (balance !== undefined) userData.balance = balance;
    if (earned !== undefined) userData.totalEarned = earned;
    
    users.set(userId, userData);
    res.json(userData);
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–∞—Ä–∫–µ—Ç–∞
app.get('/api/market/items', (req, res) => {
    const items = Array.from(marketItems.values())
        .filter(item => !item.sold)
        .sort((a, b) => b.createdAt - a.createdAt)
        .slice(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    
    res.json(items);
});

// API –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç
app.post('/api/market/sell', (req, res) => {
    const { userId, item, price } = req.body;
    
    let userData = users.get(userId);
    if (!userData) {
        return res.status(404).json({ error: 'User not found' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const itemIndex = userData.inventory.findIndex(invItem => invItem.id === item.id);
    if (itemIndex === -1) {
        return res.status(400).json({ error: 'Item not found in inventory' });
    }
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const [removedItem] = userData.inventory.splice(itemIndex, 1);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç
    const marketItem = {
        id: itemIdCounter++,
        item: removedItem,
        sellerId: userId,
        sellerName: userData.username || `User${userId}`,
        price: parseInt(price),
        createdAt: new Date().toISOString(),
        sold: false
    };
    
    marketItems.set(marketItem.id, marketItem);
    users.set(userId, userData);
    
    res.json({ success: true, marketItem });
});

// API –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
app.post('/api/market/buy', (req, res) => {
    const { userId, itemId } = req.body;
    
    const marketItem = marketItems.get(parseInt(itemId));
    if (!marketItem || marketItem.sold) {
        return res.status(404).json({ error: 'Item not found or already sold' });
    }
    
    let buyerData = users.get(userId);
    let sellerData = users.get(marketItem.sellerId);
    
    if (!buyerData || !sellerData) {
        return res.status(404).json({ error: 'User not found' });
    }
    
    if (buyerData.balance < marketItem.price) {
        return res.status(400).json({ error: 'Insufficient balance' });
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é (5%)
    const commission = Math.floor(marketItem.price * 0.05);
    const sellerEarnings = marketItem.price - commission;
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    buyerData.balance -= marketItem.price;
    sellerData.balance += sellerEarnings;
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    buyerData.inventory.push(marketItem.item);
    
    // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–π
    marketItem.sold = true;
    marketItem.buyerId = userId;
    marketItem.soldAt = new Date().toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    users.set(userId, buyerData);
    users.set(marketItem.sellerId, sellerData);
    marketItems.set(marketItem.id, marketItem);
    
    res.json({ 
        success: true, 
        item: marketItem.item,
        price: marketItem.price,
        commission: commission
    });
});

// API –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏
app.post('/api/market/quick-sell', (req, res) => {
    const { userId, itemId } = req.body;
    
    let userData = users.get(userId);
    if (!userData) {
        return res.status(404).json({ error: 'User not found' });
    }
    
    const itemIndex = userData.inventory.findIndex(item => item.id === itemId);
    if (itemIndex === -1) {
        return res.status(400).json({ error: 'Item not found in inventory' });
    }
    
    const item = userData.inventory[itemIndex];
    const quickSellPrice = Math.floor(item.basePrice * 0.8); // 80% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
    userData.inventory.splice(itemIndex, 1);
    userData.balance += quickSellPrice;
    
    users.set(userId, userData);
    
    res.json({ 
        success: true, 
        price: quickSellPrice,
        balance: userData.balance
    });
});

function createNewUser(userId) {
    const userData = {
        userId: userId,
        balance: 100, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        totalEarned: 0,
        referrals: [],
        joinDate: new Date().toISOString(),
        referralCode: generateReferralCode(),
        inventory: [
            { 
                id: 1, 
                type: 'sticker', 
                name: '–°—Ç–∏–∫–µ—Ä–ø–∞–∫ Premium', 
                rarity: 'rare', 
                image: 'üé®', 
                basePrice: 50 
            },
            { 
                id: 2, 
                type: 'boost', 
                name: '–ë—É—Å—Ç x2', 
                rarity: 'uncommon', 
                image: 'üíé', 
                basePrice: 30 
            }
        ]
    };
    users.set(userId, userData);
    return userData;
}

function generateReferralCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// Health check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
bot.onText(/\/start(?: (.+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const referralCode = match[1];
    const webAppUrl = 'https://telegram-hello-app.onrender.com';
    
    const keyboard = {
        inline_keyboard: [[
            {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: webAppUrl }
            }
        ]]
    };
    
    let message = 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EarnApp! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å:';
    
    if (referralCode) {
        message += `\n\nüë• –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥—Ä—É–≥–∞!`;
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    }
    
    bot.sendMessage(chatId, message, {
        reply_markup: keyboard
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê Web App –¥–æ—Å—Ç—É–ø–µ–Ω: https://telegram-hello-app.onrender.com`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ
    initializeTestMarketItems();
});

function initializeTestMarketItems() {
    const testItems = [
        {
            id: itemIdCounter++,
            item: { 
                id: 1001, 
                type: 'sticker', 
                name: '–°—Ç–∏–∫–µ—Ä–ø–∞–∫ "Galaxy"', 
                rarity: 'epic', 
                image: 'üåå', 
                basePrice: 80 
            },
            sellerId: 'test_user_1',
            sellerName: 'GalaxyTrader',
            price: 75,
            createdAt: new Date().toISOString(),
            sold: false
        },
        {
            id: itemIdCounter++,
            item: { 
                id: 1002, 
                type: 'avatar', 
                name: '–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–º–∫–∞', 
                rarity: 'rare', 
                image: '‚ú®', 
                basePrice: 120 
            },
            sellerId: 'test_user_2',
            sellerName: 'FrameMaster',
            price: 110,
            createdAt: new Date().toISOString(),
            sold: false
        },
        {
            id: itemIdCounter++,
            item: { 
                id: 1003, 
                type: 'boost', 
                name: '–ë—É—Å—Ç x3 –Ω–∞ 48—á', 
                rarity: 'legendary', 
                image: 'üöÄ', 
                basePrice: 150 
            },
            sellerId: 'test_user_3',
            sellerName: 'BoostSeller',
            price: 140,
            createdAt: new Date().toISOString(),
            sold: false
        }
    ];
    
    testItems.forEach(item => {
        marketItems.set(item.id, item);
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç');
}
